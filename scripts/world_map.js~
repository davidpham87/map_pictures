var width = 960,
    height = 500;

var projection = d3.geo.mercator()
    .scale((width + 1) / 2 / Math.PI)
    .translate([width / 2, height / 2 + 20])
    .precision(.1);

var path = d3.geo.path()
    .projection(projection);

var graticule = d3.geo.graticule();

// Zoom hack
var zoom = d3.behavior.zoom()
    .scaleExtent([0.5, 10])
    .on("zoom", zoomed);

var map = d3.select('#worldMap')
    .attr("width", width)
    .attr("height", height)
    .call(zoom);

var svg = map.append("g");

  // End of Zoom
function zoomed() {
    svg.attr("transform", "translate(" + d3.event.translate + ") scale(" + d3.event.scale + ")");
  }

svg.append("path")
    .datum(graticule)
    .attr("class", "graticule")
    .attr("d", path);

queue()
    .defer(d3.json, "data/world-110m.json")
    .await(createMap);

d3.csv('data/location.csv', putCityVoronoi)



function createMap(error, world) {

  svg.insert("path", ".graticule")
      .datum(topojson.feature(world, world.objects.land))
      .attr("class", "land")
      .attr("d", path);

  // svg.insert("path", ".graticule")
  //     .datum(topojson.mesh(world, world.objects.countries, function(a, b) { return a !== b; }))
  //     .attr("class", "boundary")
  //     .attr("d", path);

}

// Put dots on the map for the location from a csv file 
// location, long, lat, sizeBubble, nPictures
function putCityVoronoi(error, data){
    
  var centroid = d3.geo.centroid;

  data.forEach(function(d){
      d.longitude = +d.longitude;
      d.latitude = +d.latitude;
      d.geojson = {type: 'Point', 
                   coordinates: [d.latitude, d.longitude]};
  });
 
  //Color scale
  var color = d3.scale.quantile()
    .range(d3.range(10).map(function(i) { j = i; return "q" + j + "-10"; }))
    .domain([0, 1]);

  //Voronoi tessleation
  var voronoi = d3.geom.voronoi()
    .clipExtent([[0,0], [width, height]]);

 //Add a circle in the middle of the municipalities
 var pathCentroid = function(d, i){
     return path.centroid(d.geojson);
 }

 svg.append("g")
   .selectAll("circle")
   .data(data)
   .enter().append("circle")
   .attr("class", "city")
   .attr('r', 4)
   .attr("cx", function(d) { return pathCentroid(d)[0]; })
   .attr("cy", function(d) { return pathCentroid(d)[1]; });
    
    // Voronoi tesslation

    //Creates a voronois tesselation
    function polygon(d) {
      return "M" + d.join("L") + "Z";
    }
    
    positions = data.map(function(d){
        return pathCentroid(d);
    })

    polygons = d3.geom.voronoi(positions);

    var voronoiArea = svg.append("g")
      .attr("class", "municipality-voronoi")
     // .attr("transform", 'translate(-' + translate_width_constant + ',0)')
      .selectAll("path")
      .data(polygons, polygon) //apply the polygon function to the dat polygon
      .enter().append("path")
      .attr("d", polygon)
      .attr("stroke-width", "2")
    
    var tooltip = d3.select("body")
	    .append("div")
      .attr("class", "d3-tip worldMapTip")
	    .style("position", "absolute")
	    .style("z-index", "10")
	    .style("visibility", "hidden");
    
    function htmlInsideTooltipFn(d, i){
      d = data[i];
      htmlText = "<div align='center'>";
      htmlText += '<font color="red">' + d.location + "</font> ";
      htmlText += '   (' + d.visitedDate + ')';
      htmlText += '</div>';
      // Add something here (Such as descriptions or date of tripe)  
      return htmlText;
    }
    addToolTip(voronoiArea, tooltip, htmlInsideTooltipFn);
    
    voronoiArea.on("click", function(d, i){
        d = data[i];
        var newSlides = updatePictures(d.location, d.nPictures);
        d3.select('#pictureSlider')
            .select('ul')
            .html(newSlides);
        $(window).load(function() {
            $('.flexslider').flexslider({
                animation: "slide"
            });
        });
    });

    function updatePictures(location, nPictures){
        var newPict = function(n){            
            return '<li> \n  <img src="data/pictures/' + 
                location + '/' + (n < 10 ? '0' + n : n) + 
                '.jpg" /> \n </li> \n';
        };
        
        htmlText = ''; //'<ul class="slides"> \n';
        for (var i=1; i <= nPictures; ++i){
            htmlText += newPict(i);
        }
        //htmlText += '</ul> \n';
        console.log(htmlText);
        return htmlText;
    }

}
       
function addToolTip(g, tooltip, htmlInsideTooltipFn){
    g.on("mouseover", function(d, i){
        tooltip
            .html(htmlInsideTooltipFn(d,i))
            .style("visibility", "visible")
        return true;})
	    .on("mousemove", function(){return tooltip.style("top", (d3.event.pageY-10)+"px").style("left",(d3.event.pageX+10)+"px");})
	    .on("mouseout", function(){return tooltip.style("visibility", "hidden");})
}
// Create Voronoi tesslaiation

// Create jsSlider from photos when mouse is over some point
// Folder from photos should be
// location/01.jpg --> location/10.jpg 

d3.select(self.frameElement).style("height", height + "px");
